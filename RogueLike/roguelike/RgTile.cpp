#include "RgTile.h"

iPoint* tileOffSet;
MapTile** mapTiles;
iPoint setPos;
void createTileSet()
{
	setPos = iPointMake(RGTILE_X * RGTILE_Width, 0);

	tileOffSet = (iPoint*)malloc(sizeof(iPoint) * 9);
	for (int i = 0; i < 9; i++)
	{
		tileOffSet[i] = iPointMake( RGTILE_X * RGTILE_Width * (i % 3),
			1.0f * RGTILE_Y * RGTILE_Height * (i / 3));
		printf(" i = %d, x = %f, y = %f\n",i,tileOffSet[i].x, tileOffSet[i].y);
	}

	mapTiles = (MapTile**)malloc(sizeof(MapTile*) * MAPTILE_NUM);

	for (int i = 0; i < MAPTILE_NUM; i++)
		mapTiles[i] = (MapTile*)malloc(sizeof(MapTile) * 1);

	mapTiles[0]->rgTile = RgTile;
	mapTiles[1]->rgTile = RgRoomTile1;
	mapTiles[2]->rgTile = RgRoomTile2;
	mapTiles[3]->rgTile = RgRoomTile3;
	mapTiles[4]->rgTile = RgRoomTile4;
	mapTiles[5]->rgTile = RgRoomTile5;

	for (int i = 0; i < MAPTILE_NUM; i++)
	{
		mapTiles[i]->tileOff = iPointZero;
	}
}

void freeTileSet()
{
	free(tileOffSet);

	for (int i = 0; i < MAPTILE_NUM; i++)
	{
		if (mapTiles[i])
			free(mapTiles[i]);
	}
	free(mapTiles);
}

int RgTile[RGTILE_X * RGTILE_Y] = {
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	01, 01, FF, FF, FF, 01, 01, 01, 01, 01, 01, 01, FF, 01, 01, 01,
	01, 01, FF, FF, FF, 01, 01, 01, 01, 01, 01, 01, FF, 01, 01, 01,
	01, 01, FF, FF, FF, 01, 01, 01, 01, 01, FF, FF, FF, 01, 01, 01,
	01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, WW, WW, WW, WW, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
};

int RgRoomTile1[RGTILE_X * RGTILE_Y] = {
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
};

int RgRoomTile2[RGTILE_X * RGTILE_Y] = {
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	01, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	WW, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
};

int RgRoomTile3[RGTILE_X * RGTILE_Y] = {
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, WW,
	01, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	WW, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
};

int RgRoomTile4[RGTILE_X * RGTILE_Y] = {
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, WW, 01, WW, 01, 01, 01, 01, 01, 01, WW,
	01, 01, 01, 01, 01, 01, WW, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	WW, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
};

int RgRoomTile5[RGTILE_X * RGTILE_Y] = {
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, WW,
	01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, 01, 01, WW, 01, 01, 01, 01, 01, 01, 01,
	01, 01, 01, 01, 01, 01, WW, WW, WW, 01, 01, 01, 01, 01, 01, 01,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, WW,
	WW, WW, WW, WW, WW, WW, 01, 01, 01, 01, WW, WW, WW, WW, WW, WW,
};

